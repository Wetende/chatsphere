---
description: 
globs: 
alwaysApply: true
---
# ChatSphere Code Quality Guide

## Overview
This document outlines code quality standards for ChatSphere, covering code style, linting, testing requirements, code review processes, and best practices for both frontend and backend development.

## Related Universal Guides
- @globalrules/ai-code-quality.md
- @globalrules/ai-code-review.md

## Related Technology Rules
- @technology rules/django.md
- @technology rules/vuejs.md
- @technology rules/api.md

## Code Quality Architecture

### 1. Python Code Style

```python
# backend/.style.yapf
[style]
based_on_style = pep8
column_limit = 88
indent_width = 4
spaces_before_comment = 2
split_before_logical_operator = true
dedent_closing_brackets = true
coalesce_brackets = true
```

```python
# backend/setup.cfg
[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude = .git,__pycache__,build,dist
per-file-ignores =
    __init__.py:F401,F403
    tests/*:S101,S105,S106

[mypy]
python_version = 3.10
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_return_any = True
strict_optional = True
plugins = mypy_django_plugin.main

[mypy.plugins.django-stubs]
django_settings_module = config.settings.base
```

### 2. TypeScript Code Style

```json
// frontend/.eslintrc.json
{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": [
    "plugin:vue/vue3-recommended",
    "@vue/typescript/recommended",
    "@vue/prettier"
  ],
  "parserOptions": {
    "ecmaVersion": 2021
  },
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "vue/component-name-in-template-casing": ["error", "PascalCase"],
    "vue/require-default-prop": "error",
    "vue/require-prop-types": "error",
    "vue/v-on-event-hyphenation": ["error", "always"],
    "prettier/prettier": ["error", {
      "singleQuote": true,
      "semi": false,
      "trailingComma": "es5"
    }]
  }
}
```

```json
// frontend/tsconfig.json
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "strict": true,
    "jsx": "preserve",
    "importHelpers": true,
    "moduleResolution": "node",
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "sourceMap": true,
    "baseUrl": ".",
    "types": ["vite/client", "jest"],
    "paths": {
      "@/*": ["src/*"]
    },
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  "exclude": ["node_modules"]
}
```

### 3. Code Quality Tools

#### Pre-commit Hooks

```yaml
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3.10

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        additional_dependencies:
          - types-all
          - django-stubs

  - repo: local
    hooks:
      - id: frontend-lint
        name: Frontend Lint
        entry: bash -c 'cd frontend && npm run lint'
        language: system
        files: ^frontend/.*\.(ts|vue)$
        pass_filenames: false

      - id: frontend-type-check
        name: Frontend Type Check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/.*\.(ts|vue)$
        pass_filenames: false
```

#### CI Quality Checks

```yaml
# .github/workflows/code-quality.yml
name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt
          
      - name: Run black
        run: black --check backend
        
      - name: Run isort
        run: isort --check-only backend
        
      - name: Run flake8
        run: flake8 backend
        
      - name: Run mypy
        run: mypy backend
        
      - name: Run tests
        run: |
          cd backend
          pytest --cov=. --cov-report=xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml

  frontend-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint
          
      - name: Run type check
        run: |
          cd frontend
          npm run type-check
          
      - name: Run tests
        run: |
          cd frontend
          npm run test:unit -- --coverage
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
```

### 4. Code Quality Standards

#### Python Standards

```python
# backend/core/models.py
from typing import Optional, List
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class BaseModel(models.Model):
    """
    Base model class for all ChatSphere models.
    
    Provides common fields and functionality for all models in the application.
    """
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        related_name="%(class)s_created",
    )
    updated_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        related_name="%(class)s_updated",
    )
    
    class Meta:
        abstract = True
    
    def save(
        self,
        *args: tuple,
        **kwargs: dict,
    ) -> None:
        """
        Override save method to update timestamps and user references.
        
        Args:
            *args: Variable length argument list
            **kwargs: Arbitrary keyword arguments
        """
        user = kwargs.pop('user', None)
        if user:
            if not self.pk:
                self.created_by = user
            self.updated_by = user
        
        super().save(*args, **kwargs)
    
    @classmethod
    def get_active_objects(cls) -> List['BaseModel']:
        """
        Get all active objects of this model.
        
        Returns:
            List of active model instances
        """
        return cls.objects.filter(is_active=True)
```

#### TypeScript Standards

```typescript
// frontend/src/types/models.ts
export interface BaseModel {
  id: number
  createdAt: string
  updatedAt: string
  createdBy?: User
  updatedBy?: User
}

export interface User extends BaseModel {
  username: string
  email: string
  isActive: boolean
  lastLogin?: string
}

export interface Bot extends BaseModel {
  name: string
  description: string
  isPublic: boolean
  owner: User
  trainingStatus: 'pending' | 'training' | 'ready' | 'failed'
  lastTrainedAt?: string
}

// frontend/src/composables/useApi.ts
import { ref, Ref } from 'vue'
import axios, { AxiosError } from 'axios'
import type { BaseModel } from '@/types/models'

interface ApiOptions<T> {
  immediate?: boolean
  onSuccess?: (data: T) => void
  onError?: (error: Error) => void
}

export function useApi<T extends BaseModel>(
  url: string,
  options: ApiOptions<T> = {}
): {
  data: Ref<T | null>
  loading: Ref<boolean>
  error: Ref<Error | null>
  fetch: () => Promise<void>
} {
  const data = ref<T | null>(null)
  const loading = ref(false)
  const error = ref<Error | null>(null)

  async function fetch(): Promise<void> {
    loading.value = true
    error.value = null

    try {
      const response = await axios.get<T>(url)
      data.value = response.data
      options.onSuccess?.(response.data)
    } catch (e) {
      const err = e as AxiosError
      error.value = new Error(err.message)
      options.onError?.(error.value)
    } finally {
      loading.value = false
    }
  }

  if (options.immediate) {
    fetch()
  }

  return {
    data,
    loading,
    error,
    fetch,
  }
}
```

## Implementation Guidelines

### 1. Code Organization

1. File Structure
   ```
   backend/
   ├── apps/
   │   ├── core/
   │   │   ├── models.py
   │   │   ├── services.py
   │   │   └── utils.py
   │   └── bots/
   │       ├── models.py
   │       ├── services.py
   │       └── api/
   │           ├── views.py
   │           └── serializers.py
   frontend/
   ├── src/
   │   ├── components/
   │   │   └── common/
   │   ├── composables/
   │   ├── stores/
   │   └── views/
   ```

2. Naming Conventions
   - Python: snake_case for functions and variables
   - TypeScript: camelCase for functions and variables
   - Components: PascalCase
   - Files: kebab-case

### 2. Documentation Standards

1. Python Docstrings
   ```python
   def process_data(data: Dict[str, Any]) -> List[Dict[str, Any]]:
       """
       Process input data and return transformed results.
       
       Args:
           data: Input dictionary containing raw data
           
       Returns:
           List of processed data dictionaries
           
       Raises:
           ValueError: If data is invalid
           ProcessingError: If processing fails
       """
   ```

2. TypeScript Comments
   ```typescript
   /**
    * Process user data and update the store
    * 
    * @param userData - Raw user data from API
    * @returns Processed user object
    * @throws {ValidationError} If data is invalid
    */
   function processUserData(userData: RawUserData): User {
   ```

### 3. Testing Requirements

1. Coverage Requirements
   - Backend: 90% coverage
   - Frontend: 80% coverage
   - Critical paths: 100%

2. Test Types
   - Unit tests
   - Integration tests
   - E2E tests
   - Performance tests

## Implementation Checklist

- [ ] Set up linting tools
- [ ] Configure pre-commit hooks
- [ ] Set up CI quality checks
- [ ] Document code standards
- [ ] Create templates
- [ ] Configure IDE settings
- [ ] Train team on standards
- [ ] Set up monitoring

## Common Pitfalls

1. Inconsistent Style
   - Mixed naming conventions
   - Inconsistent formatting
   - Poor documentation
   - Unclear structure

2. Poor Type Safety
   - Missing type hints
   - Any types
   - Implicit conversions
   - Unsafe assertions

3. Test Issues
   - Insufficient coverage
   - Brittle tests
   - Slow tests
   - Poor isolation

4. Documentation Problems
   - Outdated docs
   - Missing examples
   - Unclear requirements
   - Poor organization

## Additional Resources

1. [Python Style Guide (PEP 8)](mdc:https:/www.python.org/dev/peps/pep-0008)
2. [TypeScript Style Guide](mdc:https:/google.github.io/styleguide/tsguide.html)
3. [Vue Style Guide](mdc:https:/vuejs.org/style-guide)
4. [Django Best Practices](mdc:https:/docs.djangoproject.com/en/stable/internals/contributing/writing-code/coding-style) 
# Step 1: Establish Dependency Strategy
- Create a `dependencies.md` document outlining selection criteria and management policies.
- Define rules for evaluating and approving new dependencies.
- Use Cursor AI to analyze existing dependencies and identify potential issues.

# Step 2: Configure Dependency Management
- Set up dependency scanning and update tools.
- Configure dependency lockfiles and versioning strategies.
- Use Cursor AI to generate appropriate configuration files.

# Step 3: Implement Dependency Practices
- Document the purpose of each dependency in code comments or README files.
- Create abstraction layers to minimize direct dependency coupling.
- Use Cursor AI to identify opportunities to reduce dependency usage.

# Step 4: Test Dependency Integration
- Follow the instructions in `@ai-tests` to ensure dependency stability.
- Generate tests with Cursor AI that validate:
  - Dependency updates don't break functionality.
  - Transitive dependencies are properly managed.
  - Dependencies meet security and performance requirements.

# Step 5: Monitor and Update
- Regularly audit dependencies for security vulnerabilities.
- Use Cursor AI to suggest dependency alternatives or upgrades.
- Update `dependencies.md` with new findings and best practices. 
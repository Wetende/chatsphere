# AI-Assisted Performance Optimization

## Step 1: Profile the Application
- Use `@ai-performance-profiling` to find bottlenecks.
- Analyze CPU, memory, or I/O with Cursor AI.
- Record findings in `performance.md` with metrics.

## Step 2: Generate Optimization Suggestions
- Get AI proposals (e.g., caching, algorithm tweaks).
- For Go: Suggest concurrency or memory pooling.
- For JS/TS: Recommend lazy loading or throttling.

## Step 3: Implement and Test Optimizations
- Apply changes and validate with `@ai-tests`.
- Generate performance tests with Cursor AI.
- Iterate until goals are met.

## Step 4: Document Optimizations
- Update `performance.md` with before-and-after data.
- Add code comments or refactoring suggestions via AI.

## Step 5: Monitor Performance
- Set up long-term monitoring.
- Analyze trends with Cursor AI for proactive tuning.
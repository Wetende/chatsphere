# Step 1: Design Event System
- Follow the instructions in `@ai-event-design` to define your event architecture.
- Create a spec in `events.md` detailing event types, payloads, and handlers.
- Use Cursor AI to validate the design and suggest improvements.

# Step 2: Implement Event Logic
- Use Cursor AI to generate event handling code.
  - For Go, use channels or event buses with goroutines.
  - For JavaScript/TypeScript, use EventEmitter or custom pub/sub system.
- Include error handling and retry mechanisms.

# Step 3: Integrate Events
- Connect event producers and consumers throughout the application.
- Use Cursor AI to ensure proper event flow and handling.
- Add monitoring and logging for event tracking.

# Step 4: Test Event System
- Follow the instructions in `@ai-tests` to write comprehensive tests.
- Generate tests with Cursor AI for:
  - Event emission and handling.
  - Error scenarios and recovery.
  - Event ordering and concurrency.
- Run tests and iterate until event handling is reliable.

# Step 5: Document and Monitor
- Document the event system in `events.md` with examples and best practices.
- Use Cursor AI to suggest optimizations based on event patterns. 
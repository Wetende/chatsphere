 # Step 1: Define Task Requirements
- Follow the instructions in `@ai-task-design` to specify the taskâ€™s purpose and scope.
- Write a spec in `tasks.md` detailing inputs, outputs, and success criteria.
- Use Cursor AI to refine the spec and identify potential ambiguities.

# Step 2: Generate Task Implementation
- Use Cursor AI to create the task execution code.
  - For Go, implement as a function or goroutine with error handling.
  - For JavaScript/TypeScript, use async functions or worker threads.
- Include retry logic or timeouts for robustness.

# Step 3: Integrate Task into Workflow
- Embed the task into the appropriate workflow (e.g., API endpoint, background job).
- Use Cursor AI to ensure proper integration and handle dependencies.
- Add monitoring to track task execution time and failures.

# Step 4: Test Task Execution
- Follow the instructions in `@ai-tests` to write tests for the task.
- Generate tests with Cursor AI for:
  - Successful task completion.
  - Failure scenarios (e.g., invalid input, timeouts).
  - Concurrent task execution (if applicable).
- Run tests and iterate until the task is dependable.

# Step 5: Document and Maintain
- Document the task in `tasks.md` with usage examples and troubleshooting tips.
- Use Cursor AI to suggest improvements based on test results or runtime data.
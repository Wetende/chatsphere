# Step 1: Design Pagination Strategy
- Follow the instructions in `@ai-pagination-design` to define your pagination approach.
- Create a spec in `pagination.md` detailing methods (offset, cursor-based) and limits.
- Use Cursor AI to validate the design for scalability.

# Step 2: Implement Pagination Logic
- Use Cursor AI to generate pagination code.
  - For APIs, implement query parameter handling.
  - For databases, create efficient pagination queries.
- Include sorting and filtering capabilities.

# Step 3: Integrate Pagination
- Apply pagination to relevant endpoints and data fetching operations.
- Use Cursor AI to ensure consistent pagination across the application.
- Add metadata (total count, next/prev cursors) to responses.

# Step 4: Test Pagination
- Follow the instructions in `@ai-tests` to write comprehensive tests.
- Generate tests with Cursor AI for:
  - Different page sizes and positions.
  - Edge cases (empty results, last page).
  - Performance with large datasets.
- Run tests and iterate until pagination is reliable.

# Step 5: Document and Optimize
- Document the pagination system in `pagination.md` with examples and best practices.
- Use Cursor AI to suggest performance improvements based on usage patterns. 



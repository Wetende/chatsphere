---
description: 
globs: 
alwaysApply: true
---
# ChatSphere Code Review Guide

## Overview
This document outlines code review standards and best practices for ChatSphere.

## Related Universal Guides
- @globalrules/ai-code-review.md
- @globalrules/ai-code-quality.md

## Related Technology Rules
- @technology rules/django.md
- @technology rules/vuejs.md
- @technology rules/api.md

## Code Review Process

### 1. Pre-Review Checklist

```markdown
# PR Template
## Description
[Brief description of changes]

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Pre-Review Checklist
- [ ] Tests added/updated
- [ ] Documentation updated
- [ ] Linting passed
- [ ] Type checking passed
- [ ] Pre-commit hooks passed
```

### 2. Review Standards

#### Backend Review Focus
```python
# Example: What to look for in Python code
class UserService:
    """
    ✓ Clear class docstring
    ✓ Single responsibility
    ✓ Dependency injection
    ✓ Error handling
    ✓ Type hints
    """
    def __init__(self, user_repository: UserRepository):
        self.user_repository = user_repository

    def create_user(self, data: Dict[str, Any]) -> User:
        """
        ✓ Method docstring
        ✓ Input validation
        ✓ Error handling
        ✓ Return type
        """
        try:
            validate_user_data(data)
            return self.user_repository.create(data)
        except ValidationError as e:
            log.error(f"User creation failed: {e}")
            raise
```

#### Frontend Review Focus
```typescript
// Example: What to look for in Vue components
interface Props {
  user: User  // ✓ Clear prop interface
  onUpdate?: (user: User) => void  // ✓ Optional callback
}

// ✓ Composition API with type safety
const UserCard = defineComponent({
  name: 'UserCard',  // ✓ Named component
  props: {
    user: {
      type: Object as PropType<User>,
      required: true
    },
    onUpdate: {
      type: Function as PropType<(user: User) => void>,
      required: false
    }
  },
  setup(props: Props) {
    // ✓ Reactive state management
    const isEditing = ref(false)
    
    // ✓ Computed properties
    const displayName = computed(() => 
      props.user.fullName || props.user.username
    )
    
    return { isEditing, displayName }
  }
})
```

### 3. Review Process

1. **Initial Review**
   - Code style and formatting
   - Documentation completeness
   - Test coverage
   - Type safety

2. **Functional Review**
   - Business logic correctness
   - Error handling
   - Edge cases
   - Performance considerations

3. **Security Review**
   - Input validation
   - Authentication checks
   - Authorization checks
   - Data sanitization

4. **AI-Specific Review**
   - Model input validation
   - Response filtering
   - Error handling for AI services
   - Performance optimization

## Implementation Guidelines

### 1. Review Comments

```markdown
# Good Comments
✓ "Consider using dependency injection here for better testability"
✓ "This might cause a race condition when multiple users update simultaneously"
✓ "The error message could be more descriptive for debugging"

# Avoid
✗ "This is wrong"
✗ "I wouldn't do it this way"
✗ "Why did you do this?"
```

### 2. Review Workflow

1. **Branch Protection**
   - Require reviews for main/develop
   - Require CI checks to pass
   - Require up-to-date branches

2. **Review Size**
   - Max 400 lines per review
   - Break large changes into smaller PRs
   - Use feature flags for big features

3. **Response Time**
   - Initial review: 24 hours
   - Follow-up review: 12 hours
   - Critical fixes: 4 hours

## Common Pitfalls

1. **Review Quality**
   - Superficial reviews
   - Missing security implications
   - Overlooking test quality
   - Ignoring documentation

2. **Process Issues**
   - Delayed reviews
   - Large PR size
   - Missing context
   - Unclear requirements

## Additional Resources

1. [Conventional Commits](mdc:https:/www.conventionalcommits.org)
2. [Google Code Review Guide](mdc:https:/google.github.io/eng-practices/review)
3. [Security Code Review Guide](mdc:https:/owasp.org/www-project-code-review-guide) 
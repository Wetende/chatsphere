---
description: 
globs: 
alwaysApply: false
---
# ChatSphere Consistency Guide

## Overview
This document outlines consistency standards and best practices for ChatSphere.

## Related Universal Guides
- @globalrules/ai-consistency.md
- @globalrules/ai-code-quality.md

## Related Technology Rules
- @technology rules/django.md
- @technology rules/vuejs.md
- @technology rules/api.md

## Consistency Architecture

### 1. Naming Conventions

```typescript
// frontend/src/types/naming.ts

// Interface naming - PascalCase with I prefix
interface IUserProfile {
  id: string;
  firstName: string;
  lastName: string;
  emailAddress: string;
}

// Type naming - PascalCase
type UserRole = 'admin' | 'moderator' | 'user';

// Component naming - PascalCase
const UserProfileCard: Vue.Component = {
  name: 'UserProfileCard',
  props: {
    user: {
      type: Object as PropType<IUserProfile>,
      required: true
    }
  }
};

// Variable naming - camelCase
const userSettings = {
  theme: 'dark',
  notifications: true
};

// Constants - UPPER_SNAKE_CASE
const MAX_MESSAGE_LENGTH = 1000;
const DEFAULT_TIMEOUT_MS = 5000;
```

### 2. File Structure

```bash
src/
├── components/
│   ├── base/           # Base components
│   │   ├── Button.vue
│   │   └── Input.vue
│   ├── features/       # Feature components
│   │   ├── chat/
│   │   └── profile/
│   └── layout/        # Layout components
│       ├── Header.vue
│       └── Sidebar.vue
├── composables/       # Vue composables
│   ├── useAuth.ts
│   └── useChat.ts
├── types/            # TypeScript types
│   ├── models.ts
│   └── api.ts
└── utils/            # Utility functions
    ├── format.ts
    └── validation.ts
```

### 3. Code Style

```typescript
// frontend/src/utils/style-example.ts

// Import ordering
import Vue from 'vue';
import { ref, computed } from 'vue';
import type { PropType } from 'vue';
import { useRouter } from 'vue-router';
import { storeToRefs } from 'pinia';

// Local imports
import { useAuthStore } from '@/stores/auth';
import { formatDate } from '@/utils/format';
import type { IUser } from '@/types/models';

// Component structure
export default defineComponent({
  name: 'ExampleComponent',
  
  props: {
    user: {
      type: Object as PropType<IUser>,
      required: true
    }
  },
  
  emits: ['update'],
  
  setup(props, { emit }) {
    // Composables
    const router = useRouter();
    const authStore = useAuthStore();
    
    // Refs
    const isLoading = ref(false);
    
    // Computed
    const fullName = computed(() => {
      return `${props.user.firstName} ${props.user.lastName}`;
    });
    
    // Methods
    const handleUpdate = async () => {
      try {
        isLoading.value = true;
        await authStore.updateUser(props.user);
        emit('update');
      } catch (error) {
        console.error(error);
      } finally {
        isLoading.value = false;
      }
    };
    
    return {
      isLoading,
      fullName,
      handleUpdate
    };
  }
});
```

## Implementation Guidelines

### 1. Code Organization

1. File Structure
   - Consistent naming
   - Logical grouping
   - Clear hierarchy
   - Modular design

2. Component Structure
   - Consistent layout
   - Clear separation
   - Logical ordering
   - Documentation

3. State Management
   - Centralized stores
   - Clear actions
   - Type safety
   - Error handling

### 2. Style Guidelines

1. Formatting
   - Use prettier
   - Consistent spacing
   - Line length limits
   - Clear blocks

2. Documentation
   - JSDoc comments
   - Type definitions
   - Usage examples
   - Edge cases

3. Error Handling
   - Consistent patterns
   - Clear messages
   - Type safety
   - Recovery plans

## Implementation Checklist

- [ ] Set up linting
- [ ] Configure prettier
- [ ] Define standards
- [ ] Create templates
- [ ] Document patterns
- [ ] Train team
- [ ] Review code
- [ ] Monitor compliance

## Common Pitfalls

1. Style Issues
   - Inconsistent naming
   - Mixed conventions
   - Poor organization
   - Unclear structure

2. Process Problems
   - Lack of automation
   - Missing checks
   - Poor enforcement
   - Inconsistent reviews

## Additional Resources

1. [Vue Style Guide](mdc:https:/vuejs.org/style-guide)
2. [TypeScript Guidelines](mdc:https:/www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html)
3. [Clean Code JavaScript](mdc:https:/github.com/ryanmcdermott/clean-code-javascript)
4. [Python Style Guide](mdc:https:/www.python.org/dev/peps/pep-0008) 
---
description: 
globs: 
alwaysApply: false
---
# ChatSphere UI Design Guide

## Overview
This document outlines UI design standards and best practices for ChatSphere, ensuring consistent, accessible, and user-friendly interfaces.

## Related Universal Guides
- @globalrules/ai-ui-design.md
- @globalrules/ai-code-quality.md

## Related Global Rules
- [Global Rules: UI Design](mdc:globalrules/ui-design.md)
- [Global Rules: AI UI](mdc:globalrules/ai-ui.md)

## Related Technology Rules
- @technology rules/vuejs.md
- @technology rules/api.md
- [Tailwind Rules](mdc:technology%20rules/tailwind.md)

## Design System

### 1. Color Palette

```typescript
// frontend/src/styles/colors.ts
export const colors = {
  primary: {
    50: '#f0f9ff',
    100: '#e0f2fe',
    500: '#0ea5e9',
    600: '#0284c7',
    700: '#0369a1'
  },
  neutral: {
    50: '#f8fafc',
    100: '#f1f5f9',
    700: '#334155',
    800: '#1e293b',
    900: '#0f172a'
  },
  success: '#22c55e',
  error: '#ef4444',
  warning: '#f59e0b'
}
```

### 2. Typography

```scss
// frontend/src/styles/typography.scss
:root {
  --font-sans: 'Inter', system-ui, sans-serif;
  --font-mono: 'JetBrains Mono', monospace;
  
  --text-xs: 0.75rem;
  --text-sm: 0.875rem;
  --text-base: 1rem;
  --text-lg: 1.125rem;
  --text-xl: 1.25rem;
  --text-2xl: 1.5rem;
}

.heading-1 {
  @apply text-2xl font-bold text-neutral-900;
}

.body-text {
  @apply text-base text-neutral-700;
}

.code-text {
  @apply font-mono text-sm;
}
```

### 3. Component Library

```vue
<!-- frontend/src/components/common/Button.vue -->
<template>
  <button
    :class="[
      'px-4 py-2 rounded-lg font-medium transition-colors',
      'focus:outline-none focus:ring-2',
      variants[variant],
      { 'opacity-50 cursor-not-allowed': disabled }
    ]"
    :disabled="disabled"
    @click="$emit('click')"
  >
    <slot />
  </button>
</template>

<script setup lang="ts">
const props = withDefaults(defineProps<{
  variant?: 'primary' | 'secondary' | 'danger'
  disabled?: boolean
}>(), {
  variant: 'primary',
  disabled: false
})

const variants = {
  primary: 'bg-primary-600 text-white hover:bg-primary-700',
  secondary: 'bg-neutral-100 text-neutral-700 hover:bg-neutral-200',
  danger: 'bg-error text-white hover:bg-error/90'
}
</script>
```

### 4. Layout Components

```vue
<!-- frontend/src/components/layout/Container.vue -->
<template>
  <div
    :class="[
      'mx-auto px-4 sm:px-6 lg:px-8',
      sizeClasses[size]
    ]"
  >
    <slot />
  </div>
</template>

<script setup lang="ts">
const props = withDefaults(defineProps<{
  size?: 'sm' | 'md' | 'lg' | 'xl'
}>(), {
  size: 'lg'
})

const sizeClasses = {
  sm: 'max-w-3xl',
  md: 'max-w-5xl',
  lg: 'max-w-7xl',
  xl: 'max-w-[96rem]'
}
</script>
```
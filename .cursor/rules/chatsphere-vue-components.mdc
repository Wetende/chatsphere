---
description: 
globs: 
alwaysApply: false
---
# ChatSphere Vue Components Guide

## Overview
This document outlines Vue component standards and best practices for ChatSphere, ensuring maintainability and reusability.

## Related Universal Guides
- @globalrules/ai-ui-design.mdcc
- @globalrules/ai-code-quality.mdc
- @globalrules/ai-documentation.mdc

## Related Technology Rules
- @technology rules/vuejs.mdc
- @technology rules/api.mdc

## Component Architecture

### 1. Base Components

```typescript
// frontend/src/components/base/types.ts
export interface BaseProps {
  id?: string
  class?: string
  style?: string | object
}

export interface FormFieldProps extends BaseProps {
  label?: string
  error?: string
  required?: boolean
  disabled?: boolean
}
```

```vue
<!-- frontend/src/components/base/BaseInput.vue -->
<template>
  <div :class="['form-field', { 'is-invalid': error }]">
    <label
      v-if="label"
      :for="id"
      class="form-label"
    >
      {{ label }}
      <span
        v-if="required"
        class="text-error"
      >*</span>
    </label>
    
    <input
      :id="id"
      v-bind="$attrs"
      :value="modelValue"
      :disabled="disabled"
      class="form-input"
      @input="$emit('update:modelValue', ($event.target as HTMLInputElement).value)"
    >
    
    <p
      v-if="error"
      class="form-error"
    >
      {{ error }}
    </p>
  </div>
</template>

<script setup lang="ts">
import type { FormFieldProps } from './types'

defineProps<FormFieldProps & {
  modelValue: string
}>()

defineEmits<{
  (e: 'update:modelValue', value: string): void
}>()
</script>
```

### 2. Composable Components

```typescript
// frontend/src/composables/useForm.ts
import { ref, computed } from 'vue'
import type { Ref } from 'vue'

interface FormErrors {
  [key: string]: string[]
}

export function useForm<T extends object>(initialData: T) {
  const data = ref(initialData) as Ref<T>
  const errors = ref<FormErrors>({})
  const isSubmitting = ref(false)
  
  const hasErrors = computed(() => 
    Object.keys(errors.value).length > 0
  )
  
  const setErrors = (newErrors: FormErrors): void => {
    errors.value = newErrors
  }
  
  const clearErrors = (): void => {
    errors.value = {}
  }
  
  const reset = (): void => {
    data.value = initialData
    clearErrors()
  }
  
  return {
    data,
    errors,
    isSubmitting,
    hasErrors,
    setErrors,
    clearErrors,
    reset
  }
}
```

### 3. Feature Components

```vue
<!-- frontend/src/features/chat/ChatMessage.vue -->
<template>
  <div
    :class="[
      'chat-message',
      `chat-message--${message.type}`
    ]"
  >
    <div class="chat-message__header">
      <UserAvatar
        :user="message.user"
        size="sm"
      />
      <span class="chat-message__username">
        {{ message.user.name }}
      </span>
      <time class="chat-message__time">
        {{ formatTime(message.timestamp) }}
      </time>
    </div>
    
    <div class="chat-message__content">
      <p>{{ message.content }}</p>
      <MessageActions
        v-if="showActions"
        :message="message"
        @edit="$emit('edit', message)"
        @delete="$emit('delete', message.id)"
      />
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import type { Message } from '@/types'
import { formatTime } from '@/utils/date'
import UserAvatar from '@/components/user/UserAvatar.vue'
import MessageActions from './MessageActions.vue'

const props = defineProps<{
  message: Message
  showActions?: boolean
}>()

defineEmits<{
  (e: 'edit', message: Message): void
  (e: 'delete', id: string): void
}>()
</script>
```

## Implementation Guidelines

### 1. Component Organization

```
frontend/src/
├── components/
│   ├── base/       # Base components
│   ├── common/     # Shared components
│   └── layout/     # Layout components
├── features/
│   ├── chat/       # Chat feature components
│   ├── auth/       # Auth feature components
│   └── settings/   # Settings feature components
├── composables/    # Shared composables
└── utils/         # Utility functions
```

### 2. Naming Conventions

- Base components: `Base{Name}.vue`
- Feature components: `{Feature}{Name}.vue`
- Composables: `use{Name}.ts`
- Types: `{Name}Types.ts`

### 3. Props Guidelines

```typescript
// Good
interface ButtonProps {
  variant: 'primary' | 'secondary'
  size: 'sm' | 'md' | 'lg'
  disabled?: boolean
}

// Avoid
interface ButtonProps {
  type: string       // Too generic
  customClass: string // Use class prop
  onClick: Function  // Use emit
}
```

## Common Pitfalls

1. **Component Issues**
   - Props validation missing
   - Event handling unclear
   - Poor type safety
   - Large components

2. **Implementation Problems**
   - Prop drilling
   - State management misuse
   - Poor performance
   - Tight coupling

## Additional Resources

1. [Vue Composition API](mdc:https:/vuejs.org/guide/extras/composition-api-faq.html)
2. [Vue TypeScript Support](mdc:https:/vuejs.org/guide/typescript/overview.html)
3. [Vue Best Practices](mdc:https:/v2.vuejs.org/v2/style-guide)
4. [Component Design Patterns](mdc:https:/vuejs.org/guide/reusability/composables.html) 
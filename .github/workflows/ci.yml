name: ChatSphere CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        ENVIRONMENT: test
        SECRET_KEY: test-key-for-ci
      run: |
        cd backend
        pytest -q

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd frontend
        if [ -f package.json ]; then npm ci; else echo "No frontend yet"; fi

    - name: Run linter
      run: |
        cd frontend
        if [ -f package.json ]; then npm run lint || true; else echo "No frontend yet"; fi

    - name: Run tests
      run: |
        cd frontend
        if [ -f package.json ]; then npm run test:unit || echo "No tests configured yet"; else echo "No frontend yet"; fi

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker images
      run: |
        docker compose build || docker-compose build
        docker compose up -d postgres || true
        sleep 10
        docker compose up -d || true
        sleep 10
        docker compose ps || docker-compose ps
        docker compose logs backend || true
        docker compose down || docker-compose down 